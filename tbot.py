import time
import datetime
import sqlite3

import csv

from aiogram import Bot, Dispatcher, types
from aiogram import Router, F
from aiogram.filters import Text
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from aiogram.utils.markdown import hlink

import asyncio
import logging
import random
import string
import aiofiles
import aiohttp

from config_reader import config

logging.basicConfig(level=logging.INFO)

time_to_top_up = config.time_to_top_up  # –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö
support = config.support

yoo_token = 'Bearer ' + config.yoo_token.get_secret_value()
wallet = config.wallet

bot = Bot(token=config.bot_token.get_secret_value(), parse_mode='HTML')
dp = Dispatcher()

available_payment_type = ["üè≥Ô∏è‚Äçüåà –ò–∑ –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney", "üí≥ –° –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã"]
check_transaction_buttons = ["‚òë –Ø –æ–ø–ª–∞—Ç–∏–ª/–∞", "üí± –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"]

#

db = sqlite3.connect("users.db")
cur = db.cursor()
router = Router()


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
class AddBalance(StatesGroup):
    choosing_payment_type = State()
    choosing_sum = State()
    check_transaction = State()


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
class ChoosingGoods(StatesGroup):
    choosing_goods = State()
    submit_buy = State()


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
class OrderPage(StatesGroup):
    next_page = State()  # –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ (—è –ø–µ—Ä–µ–ø—É—Ç–∞–ª –∏ –º–Ω–µ –ª–µ–Ω—å –ø–µ—Ä–µ–Ω–∞–∑—ã–≤–∞—Ç—å)
    now_page = State()


async def get_first_email_line(filename):
    async with aiofiles.open(filename, 'r+') as f:
        lines = await f.readlines()
        first_line = lines[0]
        await f.seek(0)
        await f.writelines(lines[1:])
        await f.truncate()
    return first_line.strip().split(':')


# –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_profile(message):
    buttons = [
        [
            types.KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        ],
        [
            types.KeyboardButton(text="‚úñ –ù–∞–∑–∞–¥"),
            types.KeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
    )
    user_id = message.from_user.id

    balance = await asyncio.create_task(get_balance(user_id))

    profile_message = f'üíº –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å.\nüÜî –í–∞—à id: {user_id}\nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.'
    await message.answer(profile_message, reply_markup=keyboard)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(message):
    user_full_name = message.from_user.full_name
    buttons = [
        [
            types.KeyboardButton(text="üíµ  –ö—É–ø–∏—Ç—å")
        ],
        [
            types.KeyboardButton(text="‚Ñπ –ü—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name} ! ‚ù§", reply_markup=keyboard)


# –≤—ã–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
async def send_order(message, title, type_='default'):

    data = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    if type_:

        if type_.lower() == 'string':
            filename = cur.execute(f"SELECT path FROM goods WHERE title = ?", (title,)).fetchall()[0][0]

            result = asyncio.create_task(get_first_email_line(filename))
            r = await result

            data = f'login: {r[0]}\npassword: {r[1]}'

            await message.answer(data)

    await message.answer(f'ü´Ç –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')

    return data


async def parse_page(page_data):
    data = page_data.split('__')

    msg = f'<b>üìã –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {data[0]}\n<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:</b> {data[1]} —Ä—É–±.\n' \
          f'<b>‚è≥ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {data[2]}\n<b>üîé –î–∞–Ω–Ω—ã–µ:</b> {data[3]}'

    return msg


# –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∏ –≤—ã–≤–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
async def page_manager(action, message, state):

    user_id = message.from_user.id
    data = cur.execute(f"SELECT shop_list FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0]
    data = data.split('___')[1:]

    st = await state.get_data()

    now_page = st["now_page"]
    len_page = st["next_page"]

    back = [types.KeyboardButton(text="‚úñ –ù–∞–∑–∞–¥"), ]

    buttons_full = [
        types.KeyboardButton(text="<‚¨Ö‚¨Ö"),
        types.KeyboardButton(text="‚û°‚û°>"),
    ]

    buttons_next = [types.KeyboardButton(text="‚û°‚û°>"), ]

    buttons_back = [types.KeyboardButton(text="<‚¨Ö‚¨Ö"), ]

    buttons_middle = [buttons_full, back, ]
    buttons_first = [buttons_next, back, ]
    buttons_last = [buttons_back, back, ]

    if action == 0:

        if abs(now_page) < len_page:

            now_page -= 1
            await state.update_data(now_page=now_page, )

        if abs(now_page) < len_page:

            page = data[now_page]
            page = await parse_page(page)

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=buttons_middle,
                resize_keyboard=True,
            )

            await message.answer(
                text=f"{page}",
                reply_markup=keyboard
            )

        elif abs(now_page) == len_page:

            page = data[now_page]
            page = await parse_page(page)

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=buttons_last,
                resize_keyboard=True,
            )

            await message.answer(
                text=f"{page}",
                reply_markup=keyboard
            )
        else:
            return

    elif action == 1:

        if abs(now_page) < len_page:
            now_page += 1
            await state.update_data(now_page=now_page, )

        page = data[now_page]
        page = await parse_page(page)

        if abs(now_page) < len_page and (abs(now_page) > 1):

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=buttons_middle,
                resize_keyboard=True,
            )

            await message.answer(
                text=f"{page}",
                reply_markup=keyboard
            )

        elif abs(now_page) == 1:

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=buttons_first,
                resize_keyboard=True,
            )

            await message.answer(
                text=f"{page}",
                reply_markup=keyboard
            )

        elif abs(now_page) == len_page:

            now_page += 1
            page = data[now_page]
            page = await parse_page(page)

            await state.update_data(now_page=now_page, )

            keyboard = types.ReplyKeyboardMarkup(
                keyboard=buttons_middle,
                resize_keyboard=True,
            )

            await message.answer(
                text=f"{page}",
                reply_markup=keyboard
            )
        else:
            return

    await message.answer(
        text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {abs(now_page)}/{len_page}",
    )


# –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_balance(user_id):
    balance = cur.execute(f"SELECT balance FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0]
    return balance


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney
async def generate_comment(length=15):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))


# –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.message(Command("demo"))
async def cmd_demo(message: types.Message):

    user_id = message.from_user.id

    command = "UPDATE users SET balance = ? WHERE user_id = ?"
    balance = await get_balance(user_id)
    cur.execute(command, (balance + 100, user_id,))
    db.commit()

    await message.answer(
        text="+100 ‚ÇΩ")


# –∫–æ–º–∞–Ω–¥–∞ /start (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ –∏ –≤—Å–µ–≥–¥–∞)
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name

    reg = cur.execute(f"SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchall()

    if not reg:
        command = "INSERT INTO users (user_id) VALUES(?)"
        cur.execute(command, (user_id,))
        db.commit()

    logging.info(f'{user_id} {user_full_name} {time.asctime()}')

    await state.clear()

    await main_menu(message)

    # await message.reply("–ó–∞–ø—É—Å–∫!")
    # result_task = await asyncio.create_task(get_request_data())


# –∫–æ–º–∞–Ω–¥–∞ ‚úñ –ù–∞–∑–∞–¥ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ –∏ –≤—Å–µ–≥–¥–∞)
@dp.message(Text("‚úñ –ù–∞–∑–∞–¥"))
async def cmd_start(message: types.Message, state: FSMContext):

    await state.clear()
    await main_menu(message)


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message(AddBalance.choosing_payment_type, F.text.in_(available_payment_type))
async def payment_type_chosen(message: Message, state: FSMContext):
    await state.update_data(chosen_type=message.text.lower())
    await message.answer(
        text="üìö –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddBalance.choosing_sum)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@dp.message(AddBalance.choosing_payment_type)
async def payment_type_chosen_incorrectly(message: Message):
    await message.answer(
        text="üßê –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )


# —Ç–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async def wait_add_balance(message):
    await asyncio.sleep(time_to_top_up * 60)

    user_id = message.from_user.id
    flag = cur.execute(f"SELECT paid_flag FROM users WHERE user_id = ?", (user_id, )).fetchall()[0][0]

    if flag:
        command = "UPDATE users SET payment_info = ? WHERE user_id = ?"
        cur.execute(command, (None, message.from_user.id))
        db.commit()

        await message.answer(text="–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—à–ª–æ!")


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üíµ –ö—É–ø–∏—Ç—å"
@dp.message(ChoosingGoods.choosing_goods)
async def pay(message: Message, state: FSMContext):
    cur.execute("SELECT title, price FROM goods")
    rows = cur.fetchall()

    goods = []
    for row in rows:
        text = f"{row[0]} | {row[1]} —Ä—É–±."
        goods.append(text)

    if message.text in goods:
        buttons = [[types.KeyboardButton(text="‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É"), ],
                   [types.KeyboardButton(text="‚úñ –ù–∞–∑–∞–¥")], ]

        keyboard = types.ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True,
        )

        title = message.text.split(' | ')[0]
        data = cur.execute(f"SELECT * FROM goods WHERE title = ?", (title, )).fetchall()[0]
        await message.answer(text=f'<b>‚úè –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {data[1]}\n'
                                  f'<b>üíµ –¶–µ–Ω–∞:</b> {data[2]} —Ä—É–±.\n<b>üìé –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{data[3]}',
                             reply_markup=keyboard)

        await state.update_data(choosing_goods=(data[1], data[2]))

        await state.set_state(ChoosingGoods.submit_buy)


# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.message(OrderPage.next_page, Text('‚û°‚û°>'))
async def next_page(message: types.Message, state: FSMContext):
    await page_manager(action=0, message=message, state=state)


# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.message(OrderPage.next_page, Text('<‚¨Ö‚¨Ö'))
async def next_page(message: types.Message, state: FSMContext):
    await page_manager(action=1, message=message, state=state)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message(ChoosingGoods.submit_buy, Text("‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É"))
async def submit(message: Message, state: FSMContext):
    await main_menu(message)

    user_id = message.from_user.id

    last_buy = cur.execute(f"SELECT last_buy FROM users WHERE user_id = ?", (user_id, )).fetchall()[0][0]

    if float(last_buy) + 10.0 > time.time():
        await message.answer(text=f"–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!")
        return
    else:
        command = "UPDATE users SET last_buy = ? WHERE user_id = ?"
        cur.execute(command, (time.time() // 1, user_id, ))
        db.commit()

    data = await state.get_data()
    await state.clear()
    title = data["choosing_goods"][0]
    price = data["choosing_goods"][1]

    balance = await get_balance(user_id)

    if price > balance:
        await message.answer(text=f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")

    else:

        shop_list = cur.execute(f"SELECT shop_list FROM users WHERE user_id = ?", (user_id, )).fetchall()[0][0]

        command = "UPDATE users SET balance = ? WHERE user_id = ?"
        balance = await get_balance(user_id)  # !–æ—Ç –∞–±—É–∑–∞!
        cur.execute(command, (balance - price, user_id, ))
        db.commit()

        await message.answer(text=f"ü§ù –£—Å–ø–µ—à–Ω–æ!")

        type_ = cur.execute(f"SELECT type FROM goods WHERE title = ?", (title, )).fetchall()[0][0]

        result = asyncio.create_task(send_order(message=message, title=title, type_=type_))

        r = await result

        if r == 'back':
            command = "UPDATE users SET balance = ? WHERE user_id = ?"
            balance = await get_balance(user_id)  # !–æ—Ç –∞–±—É–∑–∞!
            cur.execute(command, (balance + price, user_id, ))
            db.commit()

        else:
            t = str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            shop_list = f'{shop_list}___{title}__{price}__{t}__{r}'

            command = "UPDATE users SET shop_list = ? WHERE user_id = ?"
            cur.execute(command, (shop_list, user_id,))
            db.commit()


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(AddBalance.choosing_sum)
async def add_balance(message: Message, state: FSMContext):
    user_data = await state.get_data()
    try:
        add_sum = float(message.text) * 1
        add_sum = abs(round(add_sum, 1))

        if add_sum < 10.0 or add_sum > 5000.0:
            await message.answer(text=f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 10 –∏ –º–µ–Ω—å—à–µ 5000 !!1")
            return

        buttons = [
            [
                types.KeyboardButton(text="‚òë –Ø –æ–ø–ª–∞—Ç–∏–ª/–∞"),
                types.KeyboardButton(text="üí± –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã")
            ],
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True,
        )

        comment = await generate_comment()

        payment_type = 'PC' if user_data['chosen_type'] == "üè≥Ô∏è‚Äçüåà –ò–∑ –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney" else 'AC'

        kom = 0.03
        if payment_type == 'PC':
            kom = 0.01

        yoo_sum = add_sum + (add_sum * kom)
        add_balance_link = f'https://yoomoney.ru/quickpay/confirm.xml?receiver={wallet}&quickpay-form=button' \
                           f'&paymentType={payment_type}&sum={yoo_sum}' \
                           f'&successURL=https://t.me/dedikfree_bot&label={comment}'

        payment_info = f'{add_sum} {comment}'
        user_id = message.from_user.id
        command = "UPDATE users SET payment_info = ?, paid_flag = ? WHERE user_id = ?"
        cur.execute(command, (payment_info, 1, user_id))
        db.commit()

        await message.answer(
            text=f"<b>–í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞: {add_sum} —Ä—É–±–ª–µ–π.\n–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {user_data['chosen_type']}.\n</b>"
                 f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ {hlink('—Å—Å—ã–ª–∫–µ', add_balance_link)}\n"
                 f"–ù–∞ –æ–ø–ª–∞—Ç—É —É –í–∞—Å <b>{time_to_top_up} –º–∏–Ω—É—Ç.</b>",
            reply_markup=keyboard,
        )

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()

        asyncio.create_task(wait_add_balance(message))
        await state.set_state(AddBalance.check_transaction)

    except ValueError:
        await message.answer(
            text=f"‚ùì –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
        )


# –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —é–º–∞–Ω–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async def yoo_check():
    headers = {
        "Authorization": yoo_token,
    }

    date = datetime.datetime.now() - datetime.timedelta(minutes=time_to_top_up)
    date = date.isoformat()
    params = {
        "type": "deposition",
        "response_type": "code",
        "redirect_uri": "https://www.blessed.tk",
        "scope": "account-info operation-history",
        "from": date,

    }

    url = 'https://yoomoney.ru/api/operation-history'

    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=params, headers=headers) as resp:
            response_text = await resp.json()
            return response_text["operations"]


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
@dp.message(AddBalance.check_transaction, Text(check_transaction_buttons[0]))
async def add_balance(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = cur.execute(f"SELECT payment_info FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0]
    balance = await get_balance(user_id)

    if data:
        data = data.split()
        await message.answer(text=f"{data}")

        result_list = await yoo_check()

        for i in result_list:

            amount = float(round(i["amount"], 1))
            label = i["label"]

            if float(data[0]) == amount and data[1] == label:
                await state.clear()

                command = "UPDATE users SET balance = ?, paid_flag = ? WHERE user_id = ?"
                cur.execute(command, (round(amount + balance, 1), 0, user_id))
                db.commit()

                async with aiofiles.open('topup.csv', mode='a', encoding='utf-8') as file:
                    writer = csv.writer(file)
                    t = str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    await writer.writerow([user_id, round(amount, 1), t])
                    await file.close()

                await message.answer(text=f"üìà –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±–ª–µ–π !!1")
                await main_menu(message)
                return
        else:
            await message.answer(text=f"üîé‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    else:
        await message.answer(text=f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—à–ª–æ!!1")
        await state.clear()
        await main_menu(message)


# –æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(AddBalance.check_transaction, Text(check_transaction_buttons[1]))
async def add_balance(message: Message, state: FSMContext):
    command = "UPDATE users SET payment_info = ?, paid_flag = ? WHERE user_id = ?"
    cur.execute(command, (None, 0, message.from_user.id))
    db.commit()

    await state.clear()
    await main_menu(message)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@dp.message(AddBalance.check_transaction)
async def add_balance(message: Message):
    await message.answer(text=f"ü§Ø –≤–∞—Ç–∞—Ñ–∞–∫")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(Text("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
async def add_balance(message: Message, state: FSMContext):
    buttons = [
        [
            types.KeyboardButton(text="üè≥Ô∏è‚Äçüåà –ò–∑ –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney"),
            types.KeyboardButton(text="üí≥ –° –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã")
        ],
        [
            types.KeyboardButton(text="‚úñ –ù–∞–∑–∞–¥"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
    )

    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AddBalance.choosing_payment_type)


# –í—ã–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message(Text("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def helping(message: types.Message):
    await message.answer(f"üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @{support}")


# –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message(Text("‚Ñπ –ü—Ä–æ—Ñ–∏–ª—å"))
async def profile(message: types.Message):
    await user_profile(message)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ø—ã—Ç–∫–∞ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫
@dp.message(Text("üìù –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"))
async def goods_list(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    data = cur.execute(f"SELECT shop_list FROM users WHERE user_id = ?", (user_id, )).fetchall()[0][0]

    if data:
        data = data.split('___')[1:]
        len_data = len(data)
        await state.set_state(OrderPage.next_page)

        back = [types.KeyboardButton(text="‚úñ –ù–∞–∑–∞–¥"), ]

        buttons_next = [types.KeyboardButton(text="‚û°‚û°>"), ]
        buttons_first = [buttons_next, back, ]

        keyboard = types.ReplyKeyboardMarkup(
            keyboard=buttons_first,
            resize_keyboard=True,
        )

        page = await parse_page(page_data=data[-1])

        if len_data == 1:
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[back, ],
                resize_keyboard=True,
            )

        await message.answer(
            text=f"{page}",
            reply_markup=keyboard
        )

        await message.answer(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{len_data}",
        )

        await state.update_data(next_page=len_data)
        await state.update_data(now_page=-1)
    else:
        await message.answer(text=f"–£ –í–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫...")


# –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ü–µ–Ω–µ
@dp.message(Text("üíµ  –ö—É–ø–∏—Ç—å"))
async def buy(message: types.Message, state: FSMContext):
    cur.execute("SELECT title, price FROM goods")
    rows = cur.fetchall()

    buttons = []
    for row in rows:
        text = f"{row[0]} | {row[1]} —Ä—É–±."
        product = [
            types.KeyboardButton(text=text),
        ]
        buttons.append(product)
    buttons.append([types.KeyboardButton(text=f"‚úñ –ù–∞–∑–∞–¥"), ])
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä"
    )

    await state.set_state(ChoosingGoods.choosing_goods)
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
